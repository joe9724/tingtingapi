// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
)

// AlbumListHandlerFunc turns a function with the right signature into a album list handler
type AlbumListHandlerFunc func(AlbumListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlbumListHandlerFunc) Handle(params AlbumListParams) middleware.Responder {
	return fn(params)
}

// AlbumListHandler interface for that can handle valid album list params
type AlbumListHandler interface {
	Handle(AlbumListParams) middleware.Responder
}

// NewAlbumList creates a new http.Handler for the album list operation
func NewAlbumList(ctx *middleware.Context, handler AlbumListHandler) *AlbumList {
	return &AlbumList{Context: ctx, Handler: handler}
}

/*AlbumList swagger:route GET /album/list Album albumList

子分类下的专辑列表

登录接口

*/
type AlbumList struct {
	Context *middleware.Context
	Handler AlbumListHandler
}

func (o *AlbumList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAlbumListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//res := o.Handler.Handle(Params) // actually handle the request

	var ok AlbumListOK
	var response models.InlineResponse2006
	var categoryList models.InlineResponse2006AlbumList

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//db.Table("albums").Where(map[string]interface{}{"status":0}).Find(&categoryList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	//query

	var test []interface{}
	//db.Table("sub_category_items").Select("sub_category_items.name, category_album_relation.albumId").Joins("left join category_album_relation on category_album_relation.categoryId = sub_category_items.id and sub_category_items.id=?",1).Scan(&test)
	//db.Joins("JOIN sub_category_items ON sub_category_items.id = category_album_relation.albumId AND sub_category_items.id = ?",1).Where("credit_cards.number = ?", "411111111111").Find(&test)

	if(Params.TagId!=nil){
		rows, _ := db.Table("albums").Select("albums.name,albums.id,albums.author_avatar,albums.author_name,albums.books_number,albums.icon,albums.play_count,albums.sub_title,albums.time,albums.cover").Joins("left join tag_album_relation on tag_album_relation.albumId = albums.id").Where("tag_album_relation.tagId=?",Params.TagId).Rows()
		for rows.Next() {
			var name string
			var albumId int64
			var author_avatar string
			var author_name string
			var books_number int64
			var icon string
			var play_count int64
			var sub_title string
			var time int64
			var cover string

			err = rows.Scan(&name,&albumId,&author_avatar,&author_name,&books_number,&icon,&play_count,&sub_title,&time,&cover)
			if err != nil{
				fmt.Println(err.Error())
			}
			fmt.Println(name,albumId)
			var t models.Album
			t.AlbumID = albumId
			t.AlbumName = name
			t.Value = 1
			t.Cover = cover
			t.Author_Name = author_name
			t.Author_Avatar = author_avatar
			t.Books_Number = books_number
			t.Icon = icon
			t.Play_Count = play_count
			t.Sub_Title = sub_title
			t.Time = time
			//temp = append(temp,t)
			categoryList = append(categoryList,&t)
		}
	}else{
		rows, _ := db.Table("albums").Select("albums.name,albums.id,albums.author_avatar,albums.author_name,albums.books_number,albums.icon,albums.play_count,albums.sub_title,albums.time,albums.cover").Joins("left join category_album_relation on category_album_relation.albumId = albums.id").Where("category_album_relation.categoryId=?",Params.SubCategoryID).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Rows()
		for rows.Next() {
			var name string
			var albumId int64
			var author_avatar string
			var author_name string
			var books_number int64
			var icon string
			var play_count int64
			var sub_title string
			var time int64
			var cover string

			err = rows.Scan(&name,&albumId,&author_avatar,&author_name,&books_number,&icon,&play_count,&sub_title,&time,&cover)
			if err != nil{
				fmt.Println(err.Error())
			}
			fmt.Println(name,albumId)
			var t models.Album
			t.AlbumID = albumId
			t.AlbumName = name
			t.Value = 1
			t.Cover = cover
			t.Author_Name = author_name
			t.Author_Avatar = author_avatar
			t.Books_Number = books_number
			t.Icon = icon
			t.Play_Count = play_count
			t.Sub_Title = sub_title
			t.Time = time
			//temp = append(temp,t)
			categoryList = append(categoryList,&t)
		}
	}

	//var temp []models.Album




	//data
	//fmt.Println(categoryList)


	//db.Joins("left join sub_category_items on sub_category_items.id = category_album_relation.categoryId").Where("category_album_relation.categoryId=?",1).Find(&test)

	fmt.Println("test is",test)

	response.AlbumList = categoryList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
