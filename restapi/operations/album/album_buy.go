// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
	"time"
)

// AlbumBuyHandlerFunc turns a function with the right signature into a album buy handler
type AlbumBuyHandlerFunc func(AlbumBuyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlbumBuyHandlerFunc) Handle(params AlbumBuyParams) middleware.Responder {
	return fn(params)
}

// AlbumBuyHandler interface for that can handle valid album buy params
type AlbumBuyHandler interface {
	Handle(AlbumBuyParams) middleware.Responder
}

// NewAlbumBuy creates a new http.Handler for the album buy operation
func NewAlbumBuy(ctx *middleware.Context, handler AlbumBuyHandler) *AlbumBuy {
	return &AlbumBuy{Context: ctx, Handler: handler}
}

/*AlbumBuy swagger:route GET /album/buy Album albumBuy

购买专辑

购买专辑

*/
type AlbumBuy struct {
	Context *middleware.Context
	Handler AlbumBuyHandler
}

func (o *AlbumBuy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAlbumBuyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AlbumBuyOK
	var response models.InlineResponse2007
	//var albumBuyResult models.AlbumBuyResult

	var status models.Response


	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//第一步查出Album对应的价格
	var album models.Album
	db.Table("albums").Where("id=?",Params.AlbumID).Last(&album)
	if(album.ID==0){
		fmt.Println("albumId不存在")
		status.UnmarshalBinary([]byte(_var.Response200(201,"albumId不存在")))
	}else{
		//检查当前memberId是否有足够money
		var member models.Member
		db.Table("members").Where("id=?",Params.MemberID).Last(&member)
		if(member.ID==0){
			fmt.Println("用户不存在对应id")
			status.UnmarshalBinary([]byte(_var.Response200(202,"用户不存在对应id")))
		}else{
			if(member.Money>=album.Value){//够的话直接购买，插入order记录，并扣款
                //扣款
				//db.Model(&member).UpdateColumn("money", gorm.Expr("money - ?", album.Value)).Where("id=?",Params.MemberID)
				db.Model(&member).UpdateColumn("money", member.Money-album.Value).Where("id=?",Params.MemberID)
                //db.Table("members").Where("id=?",Params.MemberID).Assign(models.Member{Money: member.Money-album.Value})
				//db.Where(User{Name: "jinzhu"}).Assign(User{Age: 30}).FirstOrCreate(&user)
                //插入order记录
				memberId, _ := strconv.ParseInt(*Params.MemberID, 10, 64)
				//按时间戳生成order_no
				order_no := strconv.FormatInt(time.Now().UnixNano(),10)
				db.Exec("insert into orders(album_id,member_id,order_no,status,value,time) values(?,?,?,?,?,?)",*Params.AlbumID,memberId,order_no,0,album.Value,time.Now().UnixNano()/1000000000)
				fmt.Println("insert into orders(album_id,member_id,order_no,status,value) values(?,?,?,?,?)",*Params.AlbumID,memberId,order_no,0,album.Value)
				//var order = models.Order{AlbumID: *Params.AlbumID, MemberID: memberId}
				//db.Create(&order)
				//db.Table("orders").FirstOrCreate(&models.Order{}, models.Order{AlbumID: *Params.AlbumID,MemberID:album.Value})

				status.UnmarshalBinary([]byte(_var.Response200(204,"购买成功")))
			}else{//不够的话，返回购买错误，币不足
				status.UnmarshalBinary([]byte(_var.Response200(203,"悦点不足")))
			}
		}
	}

	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
