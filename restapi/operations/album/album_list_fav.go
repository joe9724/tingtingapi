// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
)

// AlbumListFavHandlerFunc turns a function with the right signature into a album list fav handler
type AlbumListFavHandlerFunc func(AlbumListFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlbumListFavHandlerFunc) Handle(params AlbumListFavParams) middleware.Responder {
	return fn(params)
}

// AlbumListFavHandler interface for that can handle valid album list fav params
type AlbumListFavHandler interface {
	Handle(AlbumListFavParams) middleware.Responder
}

// NewAlbumListFav creates a new http.Handler for the album list fav operation
func NewAlbumListFav(ctx *middleware.Context, handler AlbumListFavHandler) *AlbumListFav {
	return &AlbumListFav{Context: ctx, Handler: handler}
}

/*AlbumListFav swagger:route GET /album/list/fav Album albumListFav

根据用户信息获取收藏专辑

根据用户信息获取收藏专辑

*/
type AlbumListFav struct {
	Context *middleware.Context
	Handler AlbumListFavHandler
}

func (o *AlbumListFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAlbumListFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AlbumListFavOK
	var response models.InlineResponse2006
	var albumList models.InlineResponse2006AlbumList

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//db.Table("albums").Where(map[string]interface{}{"status":0}).Find(&categoryList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	//query

	var test []interface{}
	//db.Table("sub_category_items").Select("sub_category_items.name, category_album_relation.albumId").Joins("left join category_album_relation on category_album_relation.categoryId = sub_category_items.id and sub_category_items.id=?",1).Scan(&test)
	//db.Joins("JOIN sub_category_items ON sub_category_items.id = category_album_relation.albumId AND sub_category_items.id = ?",1).Where("credit_cards.number = ?", "411111111111").Find(&test)

	db.Table("fav_album").Select("albums.name,albums.id,albums.author_name,albums.author_avatar,albums.books_number,albums.icon,albums.play_count,albums.sub_title,albums.value").Joins("left join albums on fav_album.album_id = albums.id").Where("fav_album.member_id=?",Params.MemberID).Find(&albumList)

	/*rows, err := db.Table("fav_album").Select("albums.name,albums.id").Joins("left join albums on fav_album.album_id = albums.id").Where("fav_album.member_id=?",Params.MemberID).Rows()
	//var temp []models.Album
	for rows.Next() {
		var name string
		var albumId int64
		err = rows.Scan(&name,&albumId)
		if err != nil{
			fmt.Println(err.Error())
		}
		fmt.Println(name,albumId)
		var t models.Album
		t.AlbumID = albumId
		t.AlbumName = name
		//temp = append(temp,t)
		albumList = append(albumList,&t)
	}*/

	fmt.Println("test is",test)
	for k:=0; k<len(albumList);k++  {
		albumList[k].AlbumID = albumList[k].ID
		albumList[k].AlbumName = albumList[k].Name
	}

	response.AlbumList = albumList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
