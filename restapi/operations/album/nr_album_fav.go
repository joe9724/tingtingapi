// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
	"strconv"
)

// NrAlbumFavHandlerFunc turns a function with the right signature into a album fav handler
type NrAlbumFavHandlerFunc func(NrAlbumFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrAlbumFavHandlerFunc) Handle(params NrAlbumFavParams) middleware.Responder {
	return fn(params)
}

// NrAlbumFavHandler interface for that can handle valid album fav params
type NrAlbumFavHandler interface {
	Handle(NrAlbumFavParams) middleware.Responder
}

// NewNrAlbumFav creates a new http.Handler for the album fav operation
func NewNrAlbumFav(ctx *middleware.Context, handler NrAlbumFavHandler) *NrAlbumFav {
	return &NrAlbumFav{Context: ctx, Handler: handler}
}

/*NrAlbumFav swagger:route GET /album/fav Album albumFav

收藏/取消收藏专辑

收藏/取消收藏专辑

*/
type NrAlbumFav struct {
	Context *middleware.Context
	Handler NrAlbumFavHandler
}

func (o *NrAlbumFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrAlbumFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AlbumFavOK
	var response models.InlineResponse2007
	var msg string
	//var icons models.AlbumBuyResult

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//如果是收藏
	if(*(Params.Action) == "fav") {
		//
		value, _ := strconv.ParseInt(*Params.MemberID, 10, 64)
		db.Table("fav_album").FirstOrCreate(&models.Fav_Album{}, models.Fav_Album{AlbumId: *Params.AlbumID,MemberId:value})
		msg = "收藏成功"
		fmt.Println("收藏成功")
	}else if (*(Params.Action) == "unfav"){
		var favModel interface{}
		db.Table("fav_album").Where("album_id = ?", Params.AlbumID).Where("member_id=?",Params.MemberID).Delete(&favModel)
		msg = "取消收藏成功"
		fmt.Println("取消收藏成功")
	}

	//query

	//data

	//response.Data = icons

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,msg)))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
