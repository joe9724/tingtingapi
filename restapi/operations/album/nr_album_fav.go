// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrAlbumFavHandlerFunc turns a function with the right signature into a album fav handler
type NrAlbumFavHandlerFunc func(NrAlbumFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrAlbumFavHandlerFunc) Handle(params NrAlbumFavParams) middleware.Responder {
	return fn(params)
}

// NrAlbumFavHandler interface for that can handle valid album fav params
type NrAlbumFavHandler interface {
	Handle(NrAlbumFavParams) middleware.Responder
}

// NewNrAlbumFav creates a new http.Handler for the album fav operation
func NewNrAlbumFav(ctx *middleware.Context, handler NrAlbumFavHandler) *NrAlbumFav {
	return &NrAlbumFav{Context: ctx, Handler: handler}
}

/*NrAlbumFav swagger:route GET /album/fav Album albumFav

收藏/取消收藏专辑

收藏/取消收藏专辑

*/
type NrAlbumFav struct {
	Context *middleware.Context
	Handler NrAlbumFavHandler
}

func (o *NrAlbumFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrAlbumFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
