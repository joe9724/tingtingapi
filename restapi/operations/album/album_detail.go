// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// AlbumDetailHandlerFunc turns a function with the right signature into a album detail handler
type AlbumDetailHandlerFunc func(AlbumDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlbumDetailHandlerFunc) Handle(params AlbumDetailParams) middleware.Responder {
	return fn(params)
}

// AlbumDetailHandler interface for that can handle valid album detail params
type AlbumDetailHandler interface {
	Handle(AlbumDetailParams) middleware.Responder
}

// NewAlbumDetail creates a new http.Handler for the album detail operation
func NewAlbumDetail(ctx *middleware.Context, handler AlbumDetailHandler) *AlbumDetail {
	return &AlbumDetail{Context: ctx, Handler: handler}
}

/*AlbumDetail swagger:route GET /album/detail Album albumDetail

专辑详情

专辑详情

*/
type AlbumDetail struct {
	Context *middleware.Context
	Handler AlbumDetailHandler
}


func (o *AlbumDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAlbumDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AlbumDetailOK
	var response models.InlineResponse2005
	var album models.Album

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//查找是否已购买
	var orders []models.Order
	db.Table("orders").Where("member_id=?",Params.MemberID).Where("album_id=?",Params.AlbumID).Find(&orders)
	if(len(orders)>0){
      response.IsPay = true
	}else{
		response.IsPay = false
	}

	db.Table("albums").Where(map[string]interface{}{"status":0}).Where("id=?",Params.AlbumID).Find(&album)

	//response.Data.AlbumID = album.ID
	//response.Data.AlbumName = album.Name
	response.IsFav = false
	response.Data = &album
	response.Data.AlbumID = album.ID
    response.Data.AlbumName = album.Name
    response.Data.Books_Number = album.Books_Number
    response.Data.Summary = album.Summary

    if (Params.MemberID !=nil){
    	var count int64
    	db.Table("fav_album").Where("album_id=?",*(Params.AlbumID)).Where("member_id=?",*(Params.MemberID)).Count(&count)
    	if(count>0){
    		response.IsFav = true
		}else{
			response.IsFav = false
		}
	}

	//get taglist
    var tagList []models.Tag
    db.Raw("select tags.id,tags.name from tags left join tag_album_relation on tags.id=tag_album_relation.tagId where tags.status=0 and tag_album_relation.status=0 and tag_album_relation.albumId=?",Params.AlbumID).Find(&tagList)
	//db.Table("albums").Select("albums.name,albums.id,albums.author_avatar,albums.author_name,albums.books_number,albums.icon,albums.play_count,albums.sub_title,albums.time,albums.cover").Joins("left join tag_album_relation on tag_album_relation.albumId = albums.id").Where("tag_album_relation.album_id=?",Params.AlbumID).Find(&tagList)
	/*for k:=0; k<5;k++  {
		var temp models.Tag
		temp.Id = int64(k+1)
		temp.Name = "文学"+strconv.FormatInt(int64(k+1),10)
		tagList = append(tagList,temp)
	}*/
	response.TagList = tagList
	response.Data.AlbumID,_ = strconv.ParseInt(*(Params.AlbumID), 10, 64)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
