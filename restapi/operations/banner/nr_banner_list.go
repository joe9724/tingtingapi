// Code generated by go-swagger; DO NOT EDIT.

package banner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
)

// NrBannerListHandlerFunc turns a function with the right signature into a banner list handler
type NrBannerListHandlerFunc func(NrBannerListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrBannerListHandlerFunc) Handle(params NrBannerListParams) middleware.Responder {
	return fn(params)
}

// NrBannerListHandler interface for that can handle valid banner list params
type NrBannerListHandler interface {
	Handle(NrBannerListParams) middleware.Responder
}

// NewNrBannerList creates a new http.Handler for the banner list operation
func NewNrBannerList(ctx *middleware.Context, handler NrBannerListHandler) *NrBannerList {
	return &NrBannerList{Context: ctx, Handler: handler}
}

/*NrBannerList swagger:route GET /banner/list Banner bannerList

Banner列表

Banner列表

*/
type NrBannerList struct {
	Context *middleware.Context
	Handler NrBannerListHandler
}

func (o *NrBannerList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrBannerListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BannerListOK
	var response models.InlineResponse20011
	var banners models.InlineResponse20011Banners

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//db.Table("banners").Where(map[string]interface{}{"status":0}).Find(&banners)
	db.Raw("select banners.id,banners.name,banners.type,banners.cover,banners.jumpid,banners.jumpurl from banners left join category_banner_relation on banners.id=category_banner_relation.bannerId where category_banner_relation.status=0 and banners.status=0 and category_banner_relation.categoryId=?",Params.PosID).Find(&banners)
	//query

	//data
    fmt.Println(banners)
	response.Banners = banners

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
