// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	"time"
	"math/rand"
)

// FindPassSendSmsHandlerFunc turns a function with the right signature into a find pass send sms handler
type FindPassSendSmsHandlerFunc func(FindPassSendSmsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindPassSendSmsHandlerFunc) Handle(params FindPassSendSmsParams) middleware.Responder {
	return fn(params)
}

// FindPassSendSmsHandler interface for that can handle valid find pass send sms params
type FindPassSendSmsHandler interface {
	Handle(FindPassSendSmsParams) middleware.Responder
}

// NewFindPassSendSms creates a new http.Handler for the find pass send sms operation
func NewFindPassSendSms(ctx *middleware.Context, handler FindPassSendSmsHandler) *FindPassSendSms {
	return &FindPassSendSms{Context: ctx, Handler: handler}
}

/*FindPassSendSms swagger:route GET /member/findPass/sendSms Member findPassSendSms

下发找回密码时的验证码

下发找回密码时的验证码

*/
type FindPassSendSms struct {
	Context *middleware.Context
	Handler FindPassSendSmsHandler
}

func (o *FindPassSendSms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindPassSendSmsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//(1)产生验证码
	var code string
	rnd := rand.New(rand.NewSource(time.Now().UnixNano()))
	vcode := fmt.Sprintf("%06v", rnd.Int31n(1000000))
	fmt.Println(vcode)

	code = vcode
	code = "654321"
	//(2)查询数据库内是否5分钟内已经有验证码下发记录 没有的话请求第三方下发验证码
	var findRecord models.SendSms


	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	db.Table("sms").Where("type=?",0).Where(map[string]interface{}{"phone":Params.PhoneNumber}).Where("ts>?",time.Now().Unix()-5*60).Last(&findRecord)
	fmt.Println(findRecord)
	if findRecord.Id == 0{
		code = code
		fmt.Println("5分钟内没有delay1=",time.Now().Unix()-300)
	}else{
		fmt.Println("5分钟内有delay2=",time.Now().Unix()-300)
		code = findRecord.Code
	}
	var send bool
	send = true
	//(3)第二步成功后回调后入库
	if (send==true){
		findRecord.Code = code
		findRecord.Phone = *(Params.PhoneNumber)
		findRecord.Type = 1
		findRecord.Ts = int64(time.Now().Unix())
		db.Table("sms").Create(&findRecord)
	}

	var ok MemberRegisterSendSmsOK
	var response models.InlineResponse20016

	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
