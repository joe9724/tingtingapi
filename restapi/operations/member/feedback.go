// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"

	"time"
)

// FeedbackHandlerFunc turns a function with the right signature into a feedback handler
type FeedbackHandlerFunc func(FeedbackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FeedbackHandlerFunc) Handle(params FeedbackParams) middleware.Responder {
	return fn(params)
}

// FeedbackHandler interface for that can handle valid feedback params
type FeedbackHandler interface {
	Handle(FeedbackParams) middleware.Responder
}

// NewFeedback creates a new http.Handler for the feedback operation
func NewFeedback(ctx *middleware.Context, handler FeedbackHandler) *Feedback {
	return &Feedback{Context: ctx, Handler: handler}
}

/*Feedback swagger:route POST /member/feedback Member feedback

反馈

反馈

*/
type Feedback struct {
	Context *middleware.Context
	Handler FeedbackHandler
}

func (o *Feedback) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFeedbackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok FeedbackOK
	var response models.InlineResponse2008
	//var icons models.AlbumBuyResult

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
    db.Exec("insert into feedbacks(title,time) values(?,?)",Params.Body.Content,time.Now().UnixNano()/1000000)
	var status models.Response
	/*var status models.Response
	if(*(Params.TargetType)==0){
		db.Exec("update chapters set play_count=play_count+1 where id=?",*(Params.TargetID))
	}else if (*(Params.TargetType)==4){//支付宝
		db.Exec("update members set money=money+? where id=?",*(Params.Value),*(Params.MemberID))
		db.Exec("insert into recharge(memberId,type,order_no,time,value) values(?,?,?,?,?)",Params.MemberID,4,Params.OrderNo,time.Now().UnixNano()/1000000,Params.Value)
	}else if (*(Params.TargetType)==5){//微信
		db.Exec("update members set money=money+? where id=?",*(Params.Value),*(Params.MemberID))
		db.Exec("insert into recharge(memberId,type,order_no,time,value) values(?,?,?,?,?)",Params.MemberID,5,Params.OrderNo,time.Now().UnixNano()/1000000,Params.Value)
	}
*/


	var code int64
	var msg string

	code = 200
	msg = "上报成功"
	status.Code = &(code)
	status.Msg = &(msg)

	response.Return = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
