// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
)

// MsgListHandlerFunc turns a function with the right signature into a msg list handler
type MsgListHandlerFunc func(MsgListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MsgListHandlerFunc) Handle(params MsgListParams) middleware.Responder {
	return fn(params)
}

// MsgListHandler interface for that can handle valid msg list params
type MsgListHandler interface {
	Handle(MsgListParams) middleware.Responder
}

// NewMsgList creates a new http.Handler for the msg list operation
func NewMsgList(ctx *middleware.Context, handler MsgListHandler) *MsgList {
	return &MsgList{Context: ctx, Handler: handler}
}

/*MsgList swagger:route GET /msg/list Member msgList

系统消息列表

系统消息列表

*/
type MsgList struct {
	Context *middleware.Context
	Handler MsgListHandler
}

func (o *MsgList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMsgListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MsgListOK
	var response models.InlineResponse20013
	var msgs models.InlineResponse20013MsgList

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	var m models.Msg
	var help []*models.Help
	if *(Params.Type) == "0" {

		db.Raw("select * from msgs where id=?",Params.ID).First(&m)
	}else if (*(Params.Type) == "1") {
		db.Raw("select id,title,url from web where webtype='help'").Find(&help)
	} else{
		db.Table("msgs").Select("id,create_time,title,sub_title").Find(&msgs)
	}
	//db.Table("icons").Where(map[string]interface{}{"status":0}).Find(&icons)

	//query

	response.MsgList = msgs
	response.HelpList = help
	response.MsgDetail = m

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
