// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
"io/ioutil"
	middleware "github.com/go-openapi/runtime/middleware"
	"fmt"
	_"os"
)

// NrMemberUploadRecordHandlerFunc turns a function with the right signature into a member upload record handler
type NrMemberUploadRecordHandlerFunc func(NrMemberUploadRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrMemberUploadRecordHandlerFunc) Handle(params NrMemberUploadRecordParams) middleware.Responder {
	return fn(params)
}

// NrMemberUploadRecordHandler interface for that can handle valid member upload record params
type NrMemberUploadRecordHandler interface {
	Handle(NrMemberUploadRecordParams) middleware.Responder
}

// NewNrMemberUploadRecord creates a new http.Handler for the member upload record operation
func NewNrMemberUploadRecord(ctx *middleware.Context, handler NrMemberUploadRecordHandler) *NrMemberUploadRecord {
	return &NrMemberUploadRecord{Context: ctx, Handler: handler}
}

/*NrMemberUploadRecord swagger:route POST /member/uploadRecord Member memberUploadRecord

添加一个大类

*/
type NrMemberUploadRecord struct {
	Context *middleware.Context
	Handler NrMemberUploadRecordHandler
}

func (o *NrMemberUploadRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrMemberUploadRecordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	body, err := ioutil.ReadAll(Params.Icon)
	if err!=nil{
		fmt.Println("err upload:",err.Error())
	}
	fmt.Println(len(body))

	/*buffer := make([]byte, 512)
	_, err = file.Read(buffer)
	if err != nil {
		return err
	}

	// Reset the read pointer if necessary.
	file.Seek(0, 0)
*/
	// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
	contentType := http.DetectContentType(body)
    fmt.Println("contentType is",contentType)

	//save
	fmt.Println()
	err1 := ioutil.WriteFile("111", body, 0644)
	if err1 != nil {
		fmt.Println(err1.Error())
	}

	/*defer func() {
		_ = os.RemoveAll(path)
	}()*/

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
