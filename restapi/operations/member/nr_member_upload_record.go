// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
    "io/ioutil"
	middleware "github.com/go-openapi/runtime/middleware"
	"fmt"
	_"os"
	"runtime"
	"time"
	"strings"
	"tingtingapi/models"
	"tingtingapi/var"
	"strconv"
)

// NrMemberUploadRecordHandlerFunc turns a function with the right signature into a member upload record handler
type NrMemberUploadRecordHandlerFunc func(NrMemberUploadRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrMemberUploadRecordHandlerFunc) Handle(params NrMemberUploadRecordParams) middleware.Responder {
	return fn(params)
}

// NrMemberUploadRecordHandler interface for that can handle valid member upload record params
type NrMemberUploadRecordHandler interface {
	Handle(NrMemberUploadRecordParams) middleware.Responder
}

// NewNrMemberUploadRecord creates a new http.Handler for the member upload record operation
func NewNrMemberUploadRecord(ctx *middleware.Context, handler NrMemberUploadRecordHandler) *NrMemberUploadRecord {
	return &NrMemberUploadRecord{Context: ctx, Handler: handler}
}

/*NrMemberUploadRecord swagger:route POST /member/uploadRecord Member memberUploadRecord

添加一个大类

*/
type NrMemberUploadRecord struct {
	Context *middleware.Context
	Handler NrMemberUploadRecordHandler
}

func (o *NrMemberUploadRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrMemberUploadRecordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MemberUploadRecordOK
	var response models.InlineResponse2008
	var status models.Response
	var record models.Record
	var msg string
	var code int64

    var filename string
    filename = strconv.FormatInt((time.Now().Unix()),10)

    fmt.Println("filename is",filename)
	//如果有录音文件
	if (Params.RecordFile!=nil) {
		recordFile, err := ioutil.ReadAll(Params.RecordFile)
		if err != nil {
			fmt.Println("err upload:", err.Error())
		}
		//fmt.Println(len(recordFile))
		// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
		contentType := http.DetectContentType(recordFile)
		fmt.Println("contentType is", contentType)

		//save
		var lower string
		lower = strings.ToLower(contentType)
		if(strings.Contains(lower,"amr")||(strings.Contains(lower,"octet-stream"))) {
			if (runtime.GOOS == "windows") {
				err1 := ioutil.WriteFile(filename+".amr", recordFile, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			} else {
				err1 := ioutil.WriteFile("/root/go/src/resource/amr/"+filename+".amr", recordFile, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			}
			record.URL = filename+".amr"
		}else{
			code = 401
			msg = "recordFile format need amr"
		}
	}

	//如果有icon
	if (Params.Icon!=nil) {
		icon, err := ioutil.ReadAll(Params.Icon)
		if err != nil {
			fmt.Println("err upload:", err.Error())
		}
		fmt.Println(len(icon))
		// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
		contentType := http.DetectContentType(icon)
		fmt.Println("contentType is", contentType)

		//save
		var lower string
		lower = strings.ToLower(contentType)
		if(strings.Contains(lower,"jp")||(strings.Contains(lower,"pn"))) {
			if (runtime.GOOS == "windows") {
				err1 := ioutil.WriteFile(filename+".jpg", icon, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			} else {
				err1 := ioutil.WriteFile("/root/go/src/resource/image/icon/"+filename+".jpg", icon, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			}
			record.Icon = filename+".jpg"
		}else{
			code = 401
			msg = "image format need jpg or png"
		}
	}

	//如果有cover
	if (Params.Cover!=nil) {
		cover, err := ioutil.ReadAll(Params.Cover)
		if err != nil {
			fmt.Println("err upload:", err.Error())
		}
		//fmt.Println(len(icon))
		// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
		contentType := http.DetectContentType(cover)
		//fmt.Println("contentType is", contentType)

		//save
		var lower string
		lower = strings.ToLower(contentType)
		if(strings.Contains(lower,"jp")||(strings.Contains(lower,"pn"))) {
			if(runtime.GOOS == "windows") {
				err1 := ioutil.WriteFile(filename+".jpg", cover, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			}else{
				err1 := ioutil.WriteFile("/root/go/src/resource/image/cover/"+filename+".jpg", cover, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			}
			record.Cover = filename+".jpg"
		}else{
			code = 402
			msg = "image format need jpg or png"
		}

	}

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}

	if(&(Params.SubTitle)!=nil){
		record.Sub_Title = Params.SubTitle
	}
	if(&(Params.Summary)!=nil){
		record.Summary = *(Params.Summary)
	}

	record.Title = Params.Title
	record.User_id = *(Params.MemberID)
    db.Create(&record)
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Return = &status
	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)


	/*buffer := make([]byte, 512)
	_, err = file.Read(buffer)
	if err != nil {
		return err
	}

	// Reset the read pointer if necessary.
	file.Seek(0, 0)
*/


	/*defer func() {
		_ = os.RemoveAll(path)
	}()*/

	/*res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)*/

}
