// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	_"time"
)

// FindPassEditPassHandlerFunc turns a function with the right signature into a find pass edit pass handler
type FindPassEditPassHandlerFunc func(FindPassEditPassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindPassEditPassHandlerFunc) Handle(params FindPassEditPassParams) middleware.Responder {
	return fn(params)
}

// FindPassEditPassHandler interface for that can handle valid find pass edit pass params
type FindPassEditPassHandler interface {
	Handle(FindPassEditPassParams) middleware.Responder
}

// NewFindPassEditPass creates a new http.Handler for the find pass edit pass operation
func NewFindPassEditPass(ctx *middleware.Context, handler FindPassEditPassHandler) *FindPassEditPass {
	return &FindPassEditPass{Context: ctx, Handler: handler}
}

/*FindPassEditPass swagger:route GET /member/findPass/editPass Member findPassEditPass

修改密码

修改密码

*/
type FindPassEditPass struct {
	Context *middleware.Context
	Handler FindPassEditPassHandler
}

func (o *FindPassEditPass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindPassEditPassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MemberRegisterSendSmsOK
	var response models.InlineResponse20016
	var status models.Response
	//从数据库查找是否有符合的记录
	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	fmt.Println("params.oldpass is",Params.OldPass)
	fmt.Println("params.type is",Params.Type)
	var msg string
	var code int64
	if (*(Params.Type) == 0){ //输入老密码修改新密码
		//query
		var member models.Member
		db.Table("members").Where("phone=?",Params.PhoneNumber).Where(map[string]interface{}{"password":Params.OldPass}).Last(&member)

		if member.ID == 0{  //用户不存在 非法请求
			msg = "密码不正确"
			code = 201
		}else{
            db.Table("members").Where("phone=?",&Params.PhoneNumber).Where("password=?",&Params.OldPass).Update(map[string]interface{}{"password":Params.NewPass})
			msg = "修改密码成功"
			code = 200
		}
	}else if(*(Params.Type) == 1){ //找回密码
	    if(Params.NewPass == nil){
	    	msg = "缺少新密码参数"
	    	code = 204
		}else
		{
			var findRecord models.SendSms
			db.Table("sms").Where("type=?",1).Where(map[string]interface{}{"phone":Params.PhoneNumber}).Last(&findRecord)
			fmt.Println("find is",findRecord)
			if(findRecord.Id ==0) {
				msg = "验证码失效"
				code = 202
			}else{
				db.Table("members").Where("phone=?",&Params.PhoneNumber).Where("password=?",&Params.OldPass).Update(map[string]interface{}{"password":Params.NewPass})
				msg ="找回密码成功"
				code = 203
			}
		}


	}
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)

}
