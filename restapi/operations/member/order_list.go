// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
)

// OrderListHandlerFunc turns a function with the right signature into a order list handler
type OrderListHandlerFunc func(OrderListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OrderListHandlerFunc) Handle(params OrderListParams) middleware.Responder {
	return fn(params)
}

// OrderListHandler interface for that can handle valid order list params
type OrderListHandler interface {
	Handle(OrderListParams) middleware.Responder
}

// NewOrderList creates a new http.Handler for the order list operation
func NewOrderList(ctx *middleware.Context, handler OrderListHandler) *OrderList {
	return &OrderList{Context: ctx, Handler: handler}
}

/*OrderList swagger:route POST /member/order/list Member orderList

获取订单列表(含条件检索)

获取订单列表

*/
type OrderList struct {
	Context *middleware.Context
	Handler OrderListHandler
}

func (o *OrderList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOrderListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok OrderListOK
	var response models.InlineResponse2001
	var orderList models.InlineResponse2001Orders

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()

    //var orders []models.TrueOrder
	db.Table("orders").Select("orders.album_id,orders.id,orders.member_id,orders.order_no,orders.`value`,orders.leftMoney,albums.name ").Joins("left join albums on orders.album_id=albums.id ").Where("orders.member_id=?",Params.MemberID).Find(&orderList)
	//query
    //fmt.Println(orders)
	//data
	for k:=0;k<len(orderList) ;k++  {
		orderList[k].AlbumName = orderList[k].Name
		orderList[k].Name = ""
	}
	response.Orders = orderList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
