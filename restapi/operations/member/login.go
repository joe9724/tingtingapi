// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
	"time"
)

// LoginHandlerFunc turns a function with the right signature into a login handler
type LoginHandlerFunc func(LoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoginHandlerFunc) Handle(params LoginParams) middleware.Responder {
	return fn(params)
}

// LoginHandler interface for that can handle valid login params
type LoginHandler interface {
	Handle(LoginParams) middleware.Responder
}

// NewLogin creates a new http.Handler for the login operation
func NewLogin(ctx *middleware.Context, handler LoginHandler) *Login {
	return &Login{Context: ctx, Handler: handler}
}

/*Login swagger:route GET /member/login Member login

登录接口

登录接口

*/
type Login struct {
	Context *middleware.Context
	Handler LoginHandler
}

func (o *Login) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok LoginOK
	var response models.InlineResponse20021
	var loginRet models.LoginRet
	var code int64
	var msg string

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()

    if(*(Params.LoginType) == 0 ) { //普通密码登录
		db.Table("members").Where("phone=?", Params.Phone).Where("password=?", Params.Password).Last(&loginRet)
		if(loginRet.ID==0){
			code = 201
			msg = "账号错误"
		}else {
			code = 200
			msg = "ok"
			response.Data = &loginRet
			//response.Data.MemberID = loginRet.ID
			response.Data.Level = loginRet.Level
			fmt.Println("id is",response.Data.ID)
		}
	}else if(*(Params.LoginType) == 1){ //验证码快捷登录
		db.Table("sms").Where("type=?", 2).Where("code=?",Params.SmsCode).Where(map[string]interface{}{"phone": Params.Phone}).Where("ts>?", time.Now().Unix()-5*60).Last(&findRecord)
		if(findRecord.Id==0){
			code = 202
			msg = "验证码错误或验证码超时"
		}else{
			//判断member里是否已经有这个phone,
			var member models.Member
			member.Phone = *(Params.Phone)
			member.Password = *(Params.SmsCode)
			//
			var temp  models.LoginRet
		    db.Table("members").Where("phone=?", Params.Phone).Last(&temp)
		    temp.Password = ""
		    if(temp.ID==0){
		    	member.Name = (*(Params.Phone))[0:4]+"****"+(*(Params.Phone))[7:11]
		    	member.Ts1 = "2018-02-24 18:00:15.322041"
				db.Save(&member)
				var tempuser  models.LoginRet
				db.Table("members").Where("phone=?", Params.Phone).Last(&tempuser)
				if tempuser.ID == 0{
					code = 503
					msg = "异常"
				}else{
					response.Data = &tempuser
					response.Data.ID = tempuser.ID
					code = 200
					msg = "ok"
				}

			}else {
				code = 200
				msg = "ok"
				response.Data = &temp
				response.Data.ID = temp.ID
			}

		}
	} else if (*(Params.LoginType) == 2) {  // 绑定手机号
		db.Table("sms").Where("type=3").Where("code=?", Params.SmsCode).Where("phone-?", Params.Phone).Where("ts>?", time.Now().Unix()-5*60).Last(&findRecord)
		if (findRecord.Id == 0) {
			code = 301
			msg = "验证码错误或验证码超时"
		} else {
			var tmp models.LoginRet
			db.Table("members").Where("id=?", Params.MemberID).Where("status=0").Find(&tmp)
			if tmp.ID == 0 {
				code = 302
				msg = "用户不存在"
			} else {
				sql := "UPDATE members SET phone = ? WHERE id = ? AND status = 0"
				db.Exec(sql, Params.Phone, Params.MemberID)
				code = 200
				msg = "绑定成功"
			}
		}
	}

	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(code, msg)))
	response.Status = &status
	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)



	/*response.Data.MemberID = response.Data.Id
		response.Data.Membername = response.Data.Name

		response.Data.MemberID = 1
		response.Data.Membername = "bf"
		response.Data.Gender=1
		response.Data.Avatar = "http://tingting-resource.bitekun.xin/resource/image/avatar.jpg"
		response.Data.Name = "pf"
		response.Data.Area = "江苏 南京"
		response.Data.Birth = "1991-08-17"
		response.Data.Grade = "1-3"
		response.Data.Id = 1
		response.Data.Level = 1
		response.Data.Phone = "18963602871"
		response.Data.Money = 118
		response.Data.Ts = 1787868685*/


}
