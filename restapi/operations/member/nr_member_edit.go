// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
	"strconv"
)

// NrMemberEditHandlerFunc turns a function with the right signature into a member edit handler
type NrMemberEditHandlerFunc func(NrMemberEditParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrMemberEditHandlerFunc) Handle(params NrMemberEditParams) middleware.Responder {
	return fn(params)
}

// NrMemberEditHandler interface for that can handle valid member edit params
type NrMemberEditHandler interface {
	Handle(NrMemberEditParams) middleware.Responder
}

// NewNrMemberEdit creates a new http.Handler for the member edit operation
func NewNrMemberEdit(ctx *middleware.Context, handler NrMemberEditHandler) *NrMemberEdit {
	return &NrMemberEdit{Context: ctx, Handler: handler}
}

/*NrMemberEdit swagger:route POST /member/edit Member memberEdit

修改用户资料

修改用户资料

*/
type NrMemberEdit struct {
	Context *middleware.Context
	Handler NrMemberEditHandler
}

func (o *NrMemberEdit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrMemberEditParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MemberDetailOK
	var response models.InlineResponse200155

	var code int64
	var msg string

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	var status models.Response

	var member models.Member
	db.Table("members").Where("id=?",Params.MemberID).Find(&member)
	//db.Table("members").Where(map[string]interface{}{"status":0}).Where("id=?",Params.MemberID).Last(&detail)
	if(Params.MemberID==nil) {
		//member.Name = *Params.Membername
		code = 201
		msg = "missing memberId"
	}else {
		if (Params.Membername != nil) {
			member.Name = *Params.Membername
		}
		if (Params.BirthYear != nil) {
			member.Birth = strconv.FormatInt(*(Params.BirthYear),10) + "-" + strconv.FormatInt(*(Params.BirthMonth),10) + "-" + strconv.FormatInt(*(Params.BirthDay),10)
		}
		if (Params.Grade != nil) {
			member.Grade = *(Params.Grade)
		}
		code = 200
		msg = "ok"
	}
	db.Save(&member)
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	//response.Data = &detail

	//status

	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
