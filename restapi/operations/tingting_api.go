// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tingtingapi/restapi/operations/album"
	"tingtingapi/restapi/operations/banner"
	"tingtingapi/restapi/operations/book"
	"tingtingapi/restapi/operations/category"
	"tingtingapi/restapi/operations/chapter"
	"tingtingapi/restapi/operations/icon"
	"tingtingapi/restapi/operations/member"
	"tingtingapi/restapi/operations/recommend"
	"tingtingapi/restapi/operations/search"
)

// NewTingtingAPI creates a new Tingting instance
func NewTingtingAPI(spec *loads.Document) *TingtingAPI {
	return &TingtingAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		AlbumNrAlbumFavHandler: album.NrAlbumFavHandlerFunc(func(params album.NrAlbumFavParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumNrAlbumFav has not yet been implemented")
		}),
		BannerNrBannerDetailHandler: banner.NrBannerDetailHandlerFunc(func(params banner.NrBannerDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerNrBannerDetail has not yet been implemented")
		}),
		BannerNrBannerListHandler: banner.NrBannerListHandlerFunc(func(params banner.NrBannerListParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerNrBannerList has not yet been implemented")
		}),
		BookNrBookFavHandler: book.NrBookFavHandlerFunc(func(params book.NrBookFavParams) middleware.Responder {
			return middleware.NotImplemented("operation BookNrBookFav has not yet been implemented")
		}),
		CategoryNrCategoryListHandler: category.NrCategoryListHandlerFunc(func(params category.NrCategoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategoryList has not yet been implemented")
		}),
		CategoryNrCategorySubListHandler: category.NrCategorySubListHandlerFunc(func(params category.NrCategorySubListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategorySubList has not yet been implemented")
		}),
		IconNrIconListHandler: icon.NrIconListHandlerFunc(func(params icon.NrIconListParams) middleware.Responder {
			return middleware.NotImplemented("operation IconNrIconList has not yet been implemented")
		}),
		MemberNrMemberCheckRechargeHandler: member.NrMemberCheckRechargeHandlerFunc(func(params member.NrMemberCheckRechargeParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberCheckRecharge has not yet been implemented")
		}),
		MemberNrMemberInitHandler: member.NrMemberInitHandlerFunc(func(params member.NrMemberInitParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberInit has not yet been implemented")
		}),
		MemberNrMemberLoginByThirdPartyHandler: member.NrMemberLoginByThirdPartyHandlerFunc(func(params member.NrMemberLoginByThirdPartyParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberLoginByThirdParty has not yet been implemented")
		}),
		MemberNrMemberRegisterSendSmsHandler: member.NrMemberRegisterSendSmsHandlerFunc(func(params member.NrMemberRegisterSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberRegisterSendSms has not yet been implemented")
		}),
		MemberNrMemberReportErrHandler: member.NrMemberReportErrHandlerFunc(func(params member.NrMemberReportErrParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberReportErr has not yet been implemented")
		}),
		MemberNrMemberScanCodeHandler: member.NrMemberScanCodeHandlerFunc(func(params member.NrMemberScanCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberScanCode has not yet been implemented")
		}),
		MemberNrMemberUploadRecordHandler: member.NrMemberUploadRecordHandlerFunc(func(params member.NrMemberUploadRecordParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberUploadRecord has not yet been implemented")
		}),
		MemberNrOrderSerialNuberHandler: member.NrOrderSerialNuberHandlerFunc(func(params member.NrOrderSerialNuberParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrOrderSerialNuber has not yet been implemented")
		}),
		BookAlbumBookListHandler: book.AlbumBookListHandlerFunc(func(params book.AlbumBookListParams) middleware.Responder {
			return middleware.NotImplemented("operation BookAlbumBookList has not yet been implemented")
		}),
		AlbumAlbumBuyHandler: album.AlbumBuyHandlerFunc(func(params album.AlbumBuyParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumBuy has not yet been implemented")
		}),
		AlbumAlbumDetailHandler: album.AlbumDetailHandlerFunc(func(params album.AlbumDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumDetail has not yet been implemented")
		}),
		AlbumAlbumListHandler: album.AlbumListHandlerFunc(func(params album.AlbumListParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumList has not yet been implemented")
		}),
		AlbumAlbumListFavHandler: album.AlbumListFavHandlerFunc(func(params album.AlbumListFavParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumListFav has not yet been implemented")
		}),
		AlbumAlbumListMatchHandler: album.AlbumListMatchHandlerFunc(func(params album.AlbumListMatchParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumListMatch has not yet been implemented")
		}),
		BookBookBuyHandler: book.BookBuyHandlerFunc(func(params book.BookBuyParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookBuy has not yet been implemented")
		}),
		BookBookChapListHandler: book.BookChapListHandlerFunc(func(params book.BookChapListParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookChapList has not yet been implemented")
		}),
		BookBookDetailHandler: book.BookDetailHandlerFunc(func(params book.BookDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookDetail has not yet been implemented")
		}),
		BookBookListHandler: book.BookListHandlerFunc(func(params book.BookListParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookList has not yet been implemented")
		}),
		BookBookListFavHandler: book.BookListFavHandlerFunc(func(params book.BookListFavParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookListFav has not yet been implemented")
		}),
		CategoryCategoryDetailHandler: category.CategoryDetailHandlerFunc(func(params category.CategoryDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryDetail has not yet been implemented")
		}),
		ChapterChapterBuyHandler: chapter.ChapterBuyHandlerFunc(func(params chapter.ChapterBuyParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterBuy has not yet been implemented")
		}),
		ChapterChapterDetailHandler: chapter.ChapterDetailHandlerFunc(func(params chapter.ChapterDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterDetail has not yet been implemented")
		}),
		ChapterChapterFavHandler: chapter.ChapterFavHandlerFunc(func(params chapter.ChapterFavParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterFav has not yet been implemented")
		}),
		ChapterChapterFavListHandler: chapter.ChapterFavListHandlerFunc(func(params chapter.ChapterFavListParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterFavList has not yet been implemented")
		}),
		ChapterChapterHistoryListHandler: chapter.ChapterHistoryListHandlerFunc(func(params chapter.ChapterHistoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterHistoryList has not yet been implemented")
		}),
		MemberFeedbackHandler: member.FeedbackHandlerFunc(func(params member.FeedbackParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFeedback has not yet been implemented")
		}),
		MemberFindPassEditPassHandler: member.FindPassEditPassHandlerFunc(func(params member.FindPassEditPassParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassEditPass has not yet been implemented")
		}),
		MemberFindPassSendSmsHandler: member.FindPassSendSmsHandlerFunc(func(params member.FindPassSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassSendSms has not yet been implemented")
		}),
		MemberLoginHandler: member.LoginHandlerFunc(func(params member.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberLogin has not yet been implemented")
		}),
		MemberMsgListHandler: member.MsgListHandlerFunc(func(params member.MsgListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMsgList has not yet been implemented")
		}),
		MemberOrderListHandler: member.OrderListHandlerFunc(func(params member.OrderListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberOrderList has not yet been implemented")
		}),
		RecommendRecommendHandler: recommend.RecommendHandlerFunc(func(params recommend.RecommendParams) middleware.Responder {
			return middleware.NotImplemented("operation RecommendRecommend has not yet been implemented")
		}),
		MemberRecordListHandler: member.RecordListHandlerFunc(func(params member.RecordListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberRecordList has not yet been implemented")
		}),
		MemberRegisterHandler: member.RegisterHandlerFunc(func(params member.RegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberRegister has not yet been implemented")
		}),
		SearchSearchHandler: search.SearchHandlerFunc(func(params search.SearchParams) middleware.Responder {
			return middleware.NotImplemented("operation SearchSearch has not yet been implemented")
		}),
	}
}

/*TingtingAPI Tingting(Api) */
type TingtingAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AlbumNrAlbumFavHandler sets the operation handler for the album fav operation
	AlbumNrAlbumFavHandler album.NrAlbumFavHandler
	// BannerNrBannerDetailHandler sets the operation handler for the banner detail operation
	BannerNrBannerDetailHandler banner.NrBannerDetailHandler
	// BannerNrBannerListHandler sets the operation handler for the banner list operation
	BannerNrBannerListHandler banner.NrBannerListHandler
	// BookNrBookFavHandler sets the operation handler for the book fav operation
	BookNrBookFavHandler book.NrBookFavHandler
	// CategoryNrCategoryListHandler sets the operation handler for the category list operation
	CategoryNrCategoryListHandler category.NrCategoryListHandler
	// CategoryNrCategorySubListHandler sets the operation handler for the category sub list operation
	CategoryNrCategorySubListHandler category.NrCategorySubListHandler
	// IconNrIconListHandler sets the operation handler for the icon list operation
	IconNrIconListHandler icon.NrIconListHandler
	// MemberNrMemberCheckRechargeHandler sets the operation handler for the member check recharge operation
	MemberNrMemberCheckRechargeHandler member.NrMemberCheckRechargeHandler
	// MemberNrMemberInitHandler sets the operation handler for the member init operation
	MemberNrMemberInitHandler member.NrMemberInitHandler
	// MemberNrMemberLoginByThirdPartyHandler sets the operation handler for the member login by third party operation
	MemberNrMemberLoginByThirdPartyHandler member.NrMemberLoginByThirdPartyHandler
	// MemberNrMemberRegisterSendSmsHandler sets the operation handler for the member register send sms operation
	MemberNrMemberRegisterSendSmsHandler member.NrMemberRegisterSendSmsHandler
	// MemberNrMemberReportErrHandler sets the operation handler for the member report err operation
	MemberNrMemberReportErrHandler member.NrMemberReportErrHandler
	// MemberNrMemberScanCodeHandler sets the operation handler for the member scan code operation
	MemberNrMemberScanCodeHandler member.NrMemberScanCodeHandler
	// MemberNrMemberUploadRecordHandler sets the operation handler for the member upload record operation
	MemberNrMemberUploadRecordHandler member.NrMemberUploadRecordHandler
	// MemberNrOrderSerialNuberHandler sets the operation handler for the order serial nuber operation
	MemberNrOrderSerialNuberHandler member.NrOrderSerialNuberHandler
	// BookAlbumBookListHandler sets the operation handler for the album book list operation
	BookAlbumBookListHandler book.AlbumBookListHandler
	// AlbumAlbumBuyHandler sets the operation handler for the album buy operation
	AlbumAlbumBuyHandler album.AlbumBuyHandler
	// AlbumAlbumDetailHandler sets the operation handler for the album detail operation
	AlbumAlbumDetailHandler album.AlbumDetailHandler
	// AlbumAlbumListHandler sets the operation handler for the album list operation
	AlbumAlbumListHandler album.AlbumListHandler
	// AlbumAlbumListFavHandler sets the operation handler for the album list fav operation
	AlbumAlbumListFavHandler album.AlbumListFavHandler
	// AlbumAlbumListMatchHandler sets the operation handler for the album list match operation
	AlbumAlbumListMatchHandler album.AlbumListMatchHandler
	// BookBookBuyHandler sets the operation handler for the book buy operation
	BookBookBuyHandler book.BookBuyHandler
	// BookBookChapListHandler sets the operation handler for the book chap list operation
	BookBookChapListHandler book.BookChapListHandler
	// BookBookDetailHandler sets the operation handler for the book detail operation
	BookBookDetailHandler book.BookDetailHandler
	// BookBookListHandler sets the operation handler for the book list operation
	BookBookListHandler book.BookListHandler
	// BookBookListFavHandler sets the operation handler for the book list fav operation
	BookBookListFavHandler book.BookListFavHandler
	// CategoryCategoryDetailHandler sets the operation handler for the category detail operation
	CategoryCategoryDetailHandler category.CategoryDetailHandler
	// ChapterChapterBuyHandler sets the operation handler for the chapter buy operation
	ChapterChapterBuyHandler chapter.ChapterBuyHandler
	// ChapterChapterDetailHandler sets the operation handler for the chapter detail operation
	ChapterChapterDetailHandler chapter.ChapterDetailHandler
	// ChapterChapterFavHandler sets the operation handler for the chapter fav operation
	ChapterChapterFavHandler chapter.ChapterFavHandler
	// ChapterChapterFavListHandler sets the operation handler for the chapter fav list operation
	ChapterChapterFavListHandler chapter.ChapterFavListHandler
	// ChapterChapterHistoryListHandler sets the operation handler for the chapter history list operation
	ChapterChapterHistoryListHandler chapter.ChapterHistoryListHandler
	// MemberFeedbackHandler sets the operation handler for the feedback operation
	MemberFeedbackHandler member.FeedbackHandler
	// MemberFindPassEditPassHandler sets the operation handler for the find pass edit pass operation
	MemberFindPassEditPassHandler member.FindPassEditPassHandler
	// MemberFindPassSendSmsHandler sets the operation handler for the find pass send sms operation
	MemberFindPassSendSmsHandler member.FindPassSendSmsHandler
	// MemberLoginHandler sets the operation handler for the login operation
	MemberLoginHandler member.LoginHandler
	// MemberMsgListHandler sets the operation handler for the msg list operation
	MemberMsgListHandler member.MsgListHandler
	// MemberOrderListHandler sets the operation handler for the order list operation
	MemberOrderListHandler member.OrderListHandler
	// RecommendRecommendHandler sets the operation handler for the recommend operation
	RecommendRecommendHandler recommend.RecommendHandler
	// MemberRecordListHandler sets the operation handler for the record list operation
	MemberRecordListHandler member.RecordListHandler
	// MemberRegisterHandler sets the operation handler for the register operation
	MemberRegisterHandler member.RegisterHandler
	// SearchSearchHandler sets the operation handler for the search operation
	SearchSearchHandler search.SearchHandler
	// MemberNrMemberRegisterMemberHandler sets the operation handler for the member register member operation
	MemberNrMemberRegisterMemberHandler member.NrMemberRegisterMemberHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TingtingAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TingtingAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TingtingAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TingtingAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TingtingAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TingtingAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TingtingAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TingtingAPI
func (o *TingtingAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AlbumNrAlbumFavHandler == nil {
		unregistered = append(unregistered, "album.NrAlbumFavHandler")
	}

	if o.BannerNrBannerDetailHandler == nil {
		unregistered = append(unregistered, "banner.NrBannerDetailHandler")
	}

	if o.BannerNrBannerListHandler == nil {
		unregistered = append(unregistered, "banner.NrBannerListHandler")
	}

	if o.BookNrBookFavHandler == nil {
		unregistered = append(unregistered, "book.NrBookFavHandler")
	}

	if o.CategoryNrCategoryListHandler == nil {
		unregistered = append(unregistered, "category.NrCategoryListHandler")
	}

	if o.CategoryNrCategorySubListHandler == nil {
		unregistered = append(unregistered, "category.NrCategorySubListHandler")
	}

	if o.IconNrIconListHandler == nil {
		unregistered = append(unregistered, "icon.NrIconListHandler")
	}

	if o.MemberNrMemberCheckRechargeHandler == nil {
		unregistered = append(unregistered, "member.NrMemberCheckRechargeHandler")
	}

	if o.MemberNrMemberInitHandler == nil {
		unregistered = append(unregistered, "member.NrMemberInitHandler")
	}

	if o.MemberNrMemberLoginByThirdPartyHandler == nil {
		unregistered = append(unregistered, "member.NrMemberLoginByThirdPartyHandler")
	}

	if o.MemberNrMemberRegisterSendSmsHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRegisterSendSmsHandler")
	}
	if o.MemberNrMemberRegisterMemberHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRegisterMemberHandler")
	}
	if o.MemberNrMemberReportErrHandler == nil {
		unregistered = append(unregistered, "member.NrMemberReportErrHandler")
	}
	o.handlers["POST"]["/member/registerMember"] = member.NewNrMemberRegisterMember(o.context, o.MemberNrMemberRegisterMemberHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	if o.MemberNrMemberScanCodeHandler == nil {
		unregistered = append(unregistered, "member.NrMemberScanCodeHandler")
	}

	if o.MemberNrMemberUploadRecordHandler == nil {
		unregistered = append(unregistered, "member.NrMemberUploadRecordHandler")
	}

	if o.MemberNrOrderSerialNuberHandler == nil {
		unregistered = append(unregistered, "member.NrOrderSerialNuberHandler")
	}

	if o.BookAlbumBookListHandler == nil {
		unregistered = append(unregistered, "book.AlbumBookListHandler")
	}

	if o.AlbumAlbumBuyHandler == nil {
		unregistered = append(unregistered, "album.AlbumBuyHandler")
	}

	if o.AlbumAlbumDetailHandler == nil {
		unregistered = append(unregistered, "album.AlbumDetailHandler")
	}

	if o.AlbumAlbumListHandler == nil {
		unregistered = append(unregistered, "album.AlbumListHandler")
	}

	if o.AlbumAlbumListFavHandler == nil {
		unregistered = append(unregistered, "album.AlbumListFavHandler")
	}

	if o.AlbumAlbumListMatchHandler == nil {
		unregistered = append(unregistered, "album.AlbumListMatchHandler")
	}

	if o.BookBookBuyHandler == nil {
		unregistered = append(unregistered, "book.BookBuyHandler")
	}

	if o.BookBookChapListHandler == nil {
		unregistered = append(unregistered, "book.BookChapListHandler")
	}

	if o.BookBookDetailHandler == nil {
		unregistered = append(unregistered, "book.BookDetailHandler")
	}

	if o.BookBookListHandler == nil {
		unregistered = append(unregistered, "book.BookListHandler")
	}

	if o.BookBookListFavHandler == nil {
		unregistered = append(unregistered, "book.BookListFavHandler")
	}

	if o.CategoryCategoryDetailHandler == nil {
		unregistered = append(unregistered, "category.CategoryDetailHandler")
	}

	if o.ChapterChapterBuyHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterBuyHandler")
	}

	if o.ChapterChapterDetailHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterDetailHandler")
	}

	if o.ChapterChapterFavHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterFavHandler")
	}

	if o.ChapterChapterFavListHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterFavListHandler")
	}

	if o.ChapterChapterHistoryListHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterHistoryListHandler")
	}

	if o.MemberFeedbackHandler == nil {
		unregistered = append(unregistered, "member.FeedbackHandler")
	}

	if o.MemberFindPassEditPassHandler == nil {
		unregistered = append(unregistered, "member.FindPassEditPassHandler")
	}

	if o.MemberFindPassSendSmsHandler == nil {
		unregistered = append(unregistered, "member.FindPassSendSmsHandler")
	}

	if o.MemberLoginHandler == nil {
		unregistered = append(unregistered, "member.LoginHandler")
	}

	if o.MemberMsgListHandler == nil {
		unregistered = append(unregistered, "member.MsgListHandler")
	}

	if o.MemberOrderListHandler == nil {
		unregistered = append(unregistered, "member.OrderListHandler")
	}

	if o.RecommendRecommendHandler == nil {
		unregistered = append(unregistered, "recommend.RecommendHandler")
	}

	if o.MemberRecordListHandler == nil {
		unregistered = append(unregistered, "member.RecordListHandler")
	}

	if o.MemberRegisterHandler == nil {
		unregistered = append(unregistered, "member.RegisterHandler")
	}

	if o.SearchSearchHandler == nil {
		unregistered = append(unregistered, "search.SearchHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TingtingAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TingtingAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *TingtingAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *TingtingAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TingtingAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TingtingAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tingting API
func (o *TingtingAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TingtingAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/fav"] = album.NewNrAlbumFav(o.context, o.AlbumNrAlbumFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/detail"] = banner.NewNrBannerDetail(o.context, o.BannerNrBannerDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/list"] = banner.NewNrBannerList(o.context, o.BannerNrBannerListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/fav"] = book.NewNrBookFav(o.context, o.BookNrBookFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/list"] = category.NewNrCategoryList(o.context, o.CategoryNrCategoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/sub/list"] = category.NewNrCategorySubList(o.context, o.CategoryNrCategorySubListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/icon/list"] = icon.NewNrIconList(o.context, o.IconNrIconListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/checkRecharge"] = member.NewNrMemberCheckRecharge(o.context, o.MemberNrMemberCheckRechargeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/startUp"] = member.NewNrMemberInit(o.context, o.MemberNrMemberInitHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/loginByThirdParty"] = member.NewNrMemberLoginByThirdParty(o.context, o.MemberNrMemberLoginByThirdPartyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/register/sendSms"] = member.NewNrMemberRegisterSendSms(o.context, o.MemberNrMemberRegisterSendSmsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/reportErr"] = member.NewNrMemberReportErr(o.context, o.MemberNrMemberReportErrHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/scanCode"] = member.NewNrMemberScanCode(o.context, o.MemberNrMemberScanCodeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/uploadRecord"] = member.NewNrMemberUploadRecord(o.context, o.MemberNrMemberUploadRecordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/order/serialNuber"] = member.NewNrOrderSerialNuber(o.context, o.MemberNrOrderSerialNuberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/bookList"] = book.NewAlbumBookList(o.context, o.BookAlbumBookListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/buy"] = album.NewAlbumBuy(o.context, o.AlbumAlbumBuyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/detail"] = album.NewAlbumDetail(o.context, o.AlbumAlbumDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/list"] = album.NewAlbumList(o.context, o.AlbumAlbumListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/list/fav"] = album.NewAlbumListFav(o.context, o.AlbumAlbumListFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/list/match"] = album.NewAlbumListMatch(o.context, o.AlbumAlbumListMatchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/buy"] = book.NewBookBuy(o.context, o.BookBookBuyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/chapterList"] = book.NewBookChapList(o.context, o.BookBookChapListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/detail"] = book.NewBookDetail(o.context, o.BookBookDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/list"] = book.NewBookList(o.context, o.BookBookListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/list/fav"] = book.NewBookListFav(o.context, o.BookBookListFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/detail"] = category.NewCategoryDetail(o.context, o.CategoryCategoryDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/buy"] = chapter.NewChapterBuy(o.context, o.ChapterChapterBuyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/detail"] = chapter.NewChapterDetail(o.context, o.ChapterChapterDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/fav"] = chapter.NewChapterFav(o.context, o.ChapterChapterFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/list/fav"] = chapter.NewChapterFavList(o.context, o.ChapterChapterFavListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/list/history"] = chapter.NewChapterHistoryList(o.context, o.ChapterChapterHistoryListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/feedback"] = member.NewFeedback(o.context, o.MemberFeedbackHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/editPass"] = member.NewFindPassEditPass(o.context, o.MemberFindPassEditPassHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/sendSms"] = member.NewFindPassSendSms(o.context, o.MemberFindPassSendSmsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/login"] = member.NewLogin(o.context, o.MemberLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/list"] = member.NewMsgList(o.context, o.MemberMsgListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/order/list"] = member.NewOrderList(o.context, o.MemberOrderListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/recommend"] = recommend.NewRecommend(o.context, o.RecommendRecommendHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/record/list"] = member.NewRecordList(o.context, o.MemberRecordListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/register"] = member.NewRegister(o.context, o.MemberRegisterHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = search.NewSearch(o.context, o.SearchSearchHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TingtingAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TingtingAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
