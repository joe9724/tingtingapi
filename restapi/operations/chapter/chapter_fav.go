// Code generated by go-swagger; DO NOT EDIT.

package chapter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ChapterFavHandlerFunc turns a function with the right signature into a chapter fav handler
type ChapterFavHandlerFunc func(ChapterFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ChapterFavHandlerFunc) Handle(params ChapterFavParams) middleware.Responder {
	return fn(params)
}

// ChapterFavHandler interface for that can handle valid chapter fav params
type ChapterFavHandler interface {
	Handle(ChapterFavParams) middleware.Responder
}

// NewChapterFav creates a new http.Handler for the chapter fav operation
func NewChapterFav(ctx *middleware.Context, handler ChapterFavHandler) *ChapterFav {
	return &ChapterFav{Context: ctx, Handler: handler}
}

/*ChapterFav swagger:route GET /chapter/fav Chapter chapterFav

收藏/取消收藏章节

收藏/取消收藏章节

*/
type ChapterFav struct {
	Context *middleware.Context
	Handler ChapterFavHandler
}

func (o *ChapterFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewChapterFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
