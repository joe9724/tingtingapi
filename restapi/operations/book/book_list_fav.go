// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
)

// BookListFavHandlerFunc turns a function with the right signature into a book list fav handler
type BookListFavHandlerFunc func(BookListFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookListFavHandlerFunc) Handle(params BookListFavParams) middleware.Responder {
	return fn(params)
}

// BookListFavHandler interface for that can handle valid book list fav params
type BookListFavHandler interface {
	Handle(BookListFavParams) middleware.Responder
}

// NewBookListFav creates a new http.Handler for the book list fav operation
func NewBookListFav(ctx *middleware.Context, handler BookListFavHandler) *BookListFav {
	return &BookListFav{Context: ctx, Handler: handler}
}

/*BookListFav swagger:route GET /book/list/fav Book bookListFav

根据用户收藏书本

根据用户收藏书本

*/
type BookListFav struct {
	Context *middleware.Context
	Handler BookListFavHandler
}

func (o *BookListFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookListFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BookListFavOK
	var response models.InlineResponse2004
	var albumList models.InlineResponse2004AlbumList

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//db.Table("albums").Where(map[string]interface{}{"status":0}).Find(&categoryList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	//query

	var test []interface{}
	//db.Table("sub_category_items").Select("sub_category_items.name, category_album_relation.albumId").Joins("left join category_album_relation on category_album_relation.categoryId = sub_category_items.id and sub_category_items.id=?",1).Scan(&test)
	//db.Joins("JOIN sub_category_items ON sub_category_items.id = category_album_relation.albumId AND sub_category_items.id = ?",1).Where("credit_cards.number = ?", "411111111111").Find(&test)


	rows, err := db.Table("fav_book").Select("books.name,books.id").Joins("left join books on fav_book.book_id = books.id").Where("fav_book.member_id=?",Params.MemberID).Rows()
	//var temp []models.Album
	for rows.Next() {
		var name string
		var bookId int64
		err = rows.Scan(&name,&bookId)
		if err != nil{
			fmt.Println(err.Error())
		}
		fmt.Println(name,bookId)
		var t models.Book
		t.BookID = bookId
		t.Name = name
		//temp = append(temp,t)
		albumList = append(albumList,&t)
	}

	fmt.Println("test is",test)

	response.BookList = albumList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
