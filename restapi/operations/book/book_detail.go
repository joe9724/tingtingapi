// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// BookDetailHandlerFunc turns a function with the right signature into a book detail handler
type BookDetailHandlerFunc func(BookDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookDetailHandlerFunc) Handle(params BookDetailParams) middleware.Responder {
	return fn(params)
}

// BookDetailHandler interface for that can handle valid book detail params
type BookDetailHandler interface {
	Handle(BookDetailParams) middleware.Responder
}

// NewBookDetail creates a new http.Handler for the book detail operation
func NewBookDetail(ctx *middleware.Context, handler BookDetailHandler) *BookDetail {
	return &BookDetail{Context: ctx, Handler: handler}
}

/*BookDetail swagger:route GET /book/detail Book bookDetail

书本详情

书本详情

*/
type BookDetail struct {
	Context *middleware.Context
	Handler BookDetailHandler
}

func (o *BookDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BookDetailOK
	var response models.InlineResponse20020
	var book models.Book

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	db.Table("books").Where(map[string]interface{}{"status":0}).Where("id=?",Params.BookID).Find(&book)


	response.IsFav = false
	var tagList []models.Tag
	//db.Table("albums").Select("albums.name,albums.id,albums.author_avatar,albums.author_name,albums.books_number,albums.icon,albums.play_count,albums.sub_title,albums.time,albums.cover").Joins("left join tag_album_relation on tag_album_relation.albumId = albums.id").Where("tag_album_relation.album_id=?",Params.AlbumID).Find(&tagList)
	for k:=0; k<5;k++  {
		var temp models.Tag
		temp.Id = int64(k+1)
		temp.Name = "文学"+strconv.FormatInt(int64(k+1),10)
		tagList = append(tagList,temp)
	}
	response.TagList = tagList

	response.Data = &book

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
