// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
)

// BookChapListHandlerFunc turns a function with the right signature into a book chap list handler
type BookChapListHandlerFunc func(BookChapListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookChapListHandlerFunc) Handle(params BookChapListParams) middleware.Responder {
	return fn(params)
}

// BookChapListHandler interface for that can handle valid book chap list params
type BookChapListHandler interface {
	Handle(BookChapListParams) middleware.Responder
}

// NewBookChapList creates a new http.Handler for the book chap list operation
func NewBookChapList(ctx *middleware.Context, handler BookChapListHandler) *BookChapList {
	return &BookChapList{Context: ctx, Handler: handler}
}

/*BookChapList swagger:route GET /book/chapterList Book bookChapList

书的章节列表

书的章节列表

*/
type BookChapList struct {
	Context *middleware.Context
	Handler BookChapListHandler
}

func (o *BookChapList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookChapListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BookChapListOK
	var response models.InlineResponse20018
	var chapters models.InlineResponse20018Chapters

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//db.Table("albums").Where(map[string]interface{}{"status":0}).Find(&categoryList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	//query

	//var test []interface{}
	//db.Table("sub_category_items").Select("sub_category_items.name, category_album_relation.albumId").Joins("left join category_album_relation on category_album_relation.categoryId = sub_category_items.id and sub_category_items.id=?",1).Scan(&test)
	//db.Joins("JOIN sub_category_items ON sub_category_items.id = category_album_relation.albumId AND sub_category_items.id = ?",1).Where("credit_cards.number = ?", "411111111111").Find(&test)

	rows, err := db.Table("chapters").Select("chapters.name, chapters.id,chapters.icon,chapters.play_count,chapters.duration,chapters.url").Joins("left join book_chapter_relation on book_chapter_relation.chapterId = chapters.id").Where("book_chapter_relation.bookId=?",Params.BookID).Order("book_chapter_relation.order").Rows()
	if err !=nil{
		fmt.Println("err is",err.Error())
	}
	fmt.Println("rows.count=",rows)
	//var temp []models.Album
	for rows.Next() {
		var name string
		var icon string
		var id int64
		var playCount int64
		var duration int64
		var url string

		err = rows.Scan(&name,&id,&icon,&playCount,&duration,&url)
		if err != nil{
			fmt.Println(err.Error())
		}
		fmt.Println("url is,", url)

		var t models.Chapter
		t.Id = id
		t.Name = name
		t.Icon = icon
		t.PlayCount = playCount
		t.Duration = duration
		t.Mp3URL = url

		chapters = append(chapters,&t)
	}

	response.Chapters = chapters

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
