// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BookChapListHandlerFunc turns a function with the right signature into a book chap list handler
type BookChapListHandlerFunc func(BookChapListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookChapListHandlerFunc) Handle(params BookChapListParams) middleware.Responder {
	return fn(params)
}

// BookChapListHandler interface for that can handle valid book chap list params
type BookChapListHandler interface {
	Handle(BookChapListParams) middleware.Responder
}

// NewBookChapList creates a new http.Handler for the book chap list operation
func NewBookChapList(ctx *middleware.Context, handler BookChapListHandler) *BookChapList {
	return &BookChapList{Context: ctx, Handler: handler}
}

/*BookChapList swagger:route GET /book/chapterList Book bookChapList

书的章节列表

书的章节列表

*/
type BookChapList struct {
	Context *middleware.Context
	Handler BookChapListHandler
}

func (o *BookChapList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookChapListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
