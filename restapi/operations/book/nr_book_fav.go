// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingapi/var"
	"strconv"
)

// NrBookFavHandlerFunc turns a function with the right signature into a book fav handler
type NrBookFavHandlerFunc func(NrBookFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrBookFavHandlerFunc) Handle(params NrBookFavParams) middleware.Responder {
	return fn(params)
}

// NrBookFavHandler interface for that can handle valid book fav params
type NrBookFavHandler interface {
	Handle(NrBookFavParams) middleware.Responder
}

// NewNrBookFav creates a new http.Handler for the book fav operation
func NewNrBookFav(ctx *middleware.Context, handler NrBookFavHandler) *NrBookFav {
	return &NrBookFav{Context: ctx, Handler: handler}
}

/*NrBookFav swagger:route GET /book/fav Book bookFav

收藏/取消收藏 书本

收藏/取消收藏 书本

*/
type NrBookFav struct {
	Context *middleware.Context
	Handler NrBookFavHandler
}

func (o *NrBookFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrBookFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BookFavOK
	var response models.InlineResponse2003
	//var icons models.AlbumBuyResult

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	var status models.Response

	//如果是收藏
	if(*(Params.Action) == "fav") {
		//
		value, _ := strconv.ParseInt(*Params.MemberID, 10, 64)
		db.Table("fav_book").FirstOrCreate(&models.Fav_Book{}, models.Fav_Book{BookId: *Params.BookID,MemberId:value})
		status.UnmarshalBinary([]byte(_var.Response200(200,"收藏成功")))
	}else if (*(Params.Action) == "unfav"){
		var favModel interface{}
		db.Table("fav_book").Where("book_id = ?", Params.BookID).Where("member_id=?",Params.MemberID).Delete(&favModel)
		status.UnmarshalBinary([]byte(_var.Response200(200,"取消收藏成功")))
	}

	//query

	//data

	//response.Data = icons

	//status

	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
