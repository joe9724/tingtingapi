// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingapi/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// NrIconListHandlerFunc turns a function with the right signature into a icon list handler
type NrIconListHandlerFunc func(NrIconListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrIconListHandlerFunc) Handle(params NrIconListParams) middleware.Responder {
	return fn(params)
}

// NrIconListHandler interface for that can handle valid icon list params
type NrIconListHandler interface {
	Handle(NrIconListParams) middleware.Responder
}

// NewNrIconList creates a new http.Handler for the icon list operation
func NewNrIconList(ctx *middleware.Context, handler NrIconListHandler) *NrIconList {
	return &NrIconList{Context: ctx, Handler: handler}
}

/*NrIconList swagger:route GET /icon/list Icon iconList

app中间图标列表

app中间图标列表

*/
type NrIconList struct {
	Context *middleware.Context
	Handler NrIconListHandler
}

func (o *NrIconList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrIconListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok IconListOK
	var response models.InlineResponse2002
	var icons models.InlineResponse2002Icons

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//db.Table("icons").Where(map[string]interface{}{"status":0}).Find(&icons)
	db.Table("icons").Select("icons.id, icons.name,icons.cover,icons.targetId,icons.webUrl,icons.type").Joins("left join category_icon_relation on icons.id = category_icon_relation.iconId").Where("category_icon_relation.categoryId =?",*Params.PosID).Find(&icons)
	//query
    fmt.Println("targetId is",icons[0].TargetId)
	//data
	for k:=0;k<len(icons) ;k++  {
		icons[k].Icon = icons[k].Cover
		icons[k].TargetId = strconv.Itoa(k)
	}

	response.Icons = icons

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
