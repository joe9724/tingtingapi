// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Body2 body 2
// swagger:model body_2
type Body2 struct {

	// client
	// Required: true
	Client *string `json:"client"`

	// content
	// Required: true
	Content *string `json:"content"`

	// imei
	// Required: true
	Imei *string `json:"imei"`

	// ts
	// Required: true
	Ts *int64 `json:"ts"`

	// 反馈类型 0=账号问题,1=付费问题,2=播放问题,3=会员问题
	// Required: true
	Type *int64 `json:"type"`

	// val
	// Required: true
	Val *string `json:"val"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this body 2
func (m *Body2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImei(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body2) validateClient(formats strfmt.Registry) error {

	if err := validate.Required("client", "body", m.Client); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateImei(formats strfmt.Registry) error {

	if err := validate.Required("imei", "body", m.Imei); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateTs(formats strfmt.Registry) error {

	if err := validate.Required("ts", "body", m.Ts); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateVal(formats strfmt.Registry) error {

	if err := validate.Required("val", "body", m.Val); err != nil {
		return err
	}

	return nil
}

func (m *Body2) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Body2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Body2) UnmarshalBinary(b []byte) error {
	var res Body2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
